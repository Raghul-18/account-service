-- V1__Create_accounts_table.sql

-- Create ACCOUNTS table
CREATE TABLE ACCOUNTS (
    account_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    customer_id NUMBER NOT NULL,
    account_number VARCHAR2(20) UNIQUE NOT NULL,
    account_type VARCHAR2(20) NOT NULL CHECK (account_type IN ('SAVINGS', 'CURRENT')),
    account_status VARCHAR2(20) DEFAULT 'ACTIVE' CHECK (account_status IN ('ACTIVE', 'INACTIVE', 'CLOSED')),
    balance DECIMAL(15,2) DEFAULT 0.00 NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    -- Constraints
    CONSTRAINT chk_balance_non_negative CHECK (balance >= 0),
    CONSTRAINT uk_customer_account_type UNIQUE (customer_id, account_type)
);

-- Create indexes for better performance
CREATE INDEX idx_accounts_customer_id ON ACCOUNTS (customer_id);
CREATE INDEX idx_accounts_account_number ON ACCOUNTS (account_number);
CREATE INDEX idx_accounts_status ON ACCOUNTS (account_status);
CREATE INDEX idx_accounts_created_at ON ACCOUNTS (created_at);

-- Create sequence for account number generation (if needed for custom logic)
CREATE SEQUENCE account_number_seq
    START WITH 1
    INCREMENT BY 1
    NOCACHE;

-- Add comments for documentation
COMMENT ON TABLE ACCOUNTS IS 'Bank accounts for customers - each customer can have one SAVINGS and one CURRENT account';
COMMENT ON COLUMN ACCOUNTS.account_id IS 'Primary key - auto-generated account ID';
COMMENT ON COLUMN ACCOUNTS.customer_id IS 'Foreign key reference to CUSTOMERS.customer_id';
COMMENT ON COLUMN ACCOUNTS.account_number IS 'Unique account number - format: BANK{customer_id}{type_code}{sequence}';
COMMENT ON COLUMN ACCOUNTS.account_type IS 'Account type - SAVINGS or CURRENT';
COMMENT ON COLUMN ACCOUNTS.account_status IS 'Account status - ACTIVE, INACTIVE, or CLOSED';
COMMENT ON COLUMN ACCOUNTS.balance IS 'Current account balance - must be non-negative';
COMMENT ON COLUMN ACCOUNTS.created_at IS 'Account creation timestamp';
COMMENT ON COLUMN ACCOUNTS.updated_at IS 'Last update timestamp';

-- Create trigger for updating updated_at timestamp
CREATE OR REPLACE TRIGGER trg_accounts_updated_at
    BEFORE UPDATE ON ACCOUNTS
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;

-- Insert sample data for testing (optional - remove in production)
-- This will be populated automatically via Kafka events in real scenario
/*
INSERT INTO ACCOUNTS (customer_id, account_number, account_type, balance) VALUES
(1, 'BANK1SAV001', 'SAVINGS', 1000.00);
INSERT INTO ACCOUNTS (customer_id, account_number, account_type, balance) VALUES
(1, 'BANK1CUR001', 'CURRENT', 5000.00);
*/